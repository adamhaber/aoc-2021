(def l `(3,4,3,1,2))

(def llarge '(1,3,3,4,5,1,1,1,1,1,1,2,1,4,1,1,1,5,2,2,4,3,1,1,2,5,4,2,2,3,1,2,3,2,1,1,4,4,2,4,4,1,2,4,3,3,3,1,1,3,4,5,2,5,1,2,5,1,1,1,3,2,3,3,1,4,1,1,4,1,4,1,1,1,1,5,4,2,1,2,2,5,5,1,1,1,1,2,1,1,1,1,3,2,3,1,4,3,1,1,3,1,1,1,1,3,3,4,5,1,1,5,4,4,4,4,2,5,1,1,2,5,1,3,4,4,1,4,1,5,5,2,4,5,1,1,3,1,3,1,4,1,3,1,2,2,1,5,1,5,1,3,1,3,1,4,1,4,5,1,4,5,1,1,5,2,2,4,5,1,3,2,4,2,1,1,1,2,1,2,1,3,4,4,2,2,4,2,1,4,1,3,1,3,5,3,1,1,2,2,1,5,2,1,1,1,1,1,5,4,3,5,3,3,1,5,5,4,4,2,1,1,1,2,5,3,3,2,1,1,1,5,5,3,1,4,4,2,4,2,1,1,1,5,1,2,4,1,3,4,4,2,1,4,2,1,3,4,3,3,2,3,1,5,3,1,1,5,1,2,2,4,4,1,2,3,1,2,1,1,2,1,1,1,2,3,5,5,1,2,3,1,3,5,4,2,1,3,3,4))

(defn counter [x]
  (if (= x 0) 6 (dec x)))

(defn count-zeros [l]
  (count (filter #(= % 0) l)))

(count (loop [l l
       n-days (dec 80)]
  (let [n-zeros (count-zeros l)
        new-timers (map counter l)
        new-l (concat new-timers (repeat n-zeros 8))]
    (if (= 0 n-days) new-l (recur new-l (dec n-days))))))


((frequencies llarge) 3)
(loop [n0 0
       n1 115
       n2 52
       n3 47
       n4 49
       n5 37
       n6 0
       n7 0
       n8 0
       n-days 256]
    (if (= 0 n-days) (+ n0 n1 n2 n3 n4 n5 n6 n7 n8) 
        (recur n1 n2 n3 n4 n5 n6 (+ n7 n0) n8 n0 (dec n-days))))
